#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Parse GEM5 system configuration and simulation results and generate an McPAT
XML file from a given template.

"""

from __future__ import print_function
from __future__ import absolute_import

__author__     = "Lluís Vilanova"
__copyright__  = "Copyright 2013-2014, Lluís Vilanova"
__license__    = "GPL version 3 or later"

__maintainer__ = "Lluís Vilanova"
__email__      = "vilanova@ac.upc.edu"


import argparse
import os
import pprint
import re
import sys

import gem5_mcpat


def show_actions():
    print("See the jinja documentation to learn how to use these.")
    print()
    for i in gem5_mcpat.template_doc():
        print(i)


def _set_variable_spec(arg):
    m = re.match("([^=]*)=([^=]*)", arg)
    if m is None:
        raise argparse.ArgumentTypeError(
            repr(arg) +
            " is not a valid syntax for setting variables")
    return m.groups()


def _parser_add_contents_flags(parser):
    parser.add_argument("--add-json",
                        action="append",
                        default=[],
                        type=argparse.FileType(),
                        help="merge a JSON file into the template context")
    parser.add_argument("--set-variable",
                        action="append",
                        default=[],
                        type=_set_variable_spec,
                        help="merge a single variable into the template context"
                        " (syntax: NAME=VALUE; e.g., system.membus.clock=1e-09)")
    parser.add_argument("gem5_config",
                        type=argparse.FileType(),
                        help="GEM5's system configuration file (JSON format)")
    parser.add_argument("gem5_stats",
                        type=argparse.FileType(),
                        help="GEM5's output statistics")


def _build_stats(gem5_config, gem5_stats, add_json, set_variable):
    stats = gem5_mcpat.Stats()
    gem5_mcpat.gem5_config_load(stats, gem5_config)
    gem5_mcpat.gem5_stats_load(stats, gem5_stats)
    for json_file in add_json:
        gem5_mcpat.stats_add_json(stats, json_file)
    gem5_mcpat.stats_set_variables(stats, set_variable)
    return stats


def show_json(gem5_config, gem5_stats, add_json, set_variable):
    stats = _build_stats(gem5_config, gem5_stats, add_json, set_variable)

    # ugly hack for unicode strings
    def safe_repr(object, context, maxlevels, level):
        type_ = pprint._type(object)
        if type_ is unicode:
            object = str(object)
        return pprint._safe_repr(object, context, maxlevels, level)

    p = pprint.PrettyPrinter()
    p.format = safe_repr
    p.pprint(stats.to_dict())


def show_text(gem5_config, gem5_stats, add_json, set_variable):
    stats = _build_stats(gem5_config, gem5_stats, add_json, set_variable)
    for name, val in stats.to_list():
        if isinstance(val, basestring):
            val = str(val)
        print("%s: %r" % (name, val))


def _arg_directory(path):
    if not os.path.isdir(path):
        raise argparse.ArgumentTypeError("%r is not a directory" % path)
    return path


def generate(parser,
             gem5_config, gem5_stats, template,
             add_json, set_variable, template_dir):
    stats = _build_stats(gem5_config, gem5_stats, add_json, set_variable)

    template_path = []
    template_name = template
    if os.path.isfile(template_name):
        template_path = [os.path.abspath(os.path.dirname(template_name))]
        template_name = os.path.basename(template_name)
    template_path += template_dir

    base_path = os.path.dirname(gem5_mcpat.__file__) + os.path.sep + "templates"
    if base_path not in template_path:
        template_path.append(base_path)

    try:
        result = gem5_mcpat.template_load(template_path, template_name, stats)
    except gem5_mcpat.NameSyntaxError as e:
        parser.error(e)

    print(result)


def main(args):
    parser = argparse.ArgumentParser(
        description=__doc__,
        epilog="""
Use '--help' as an argument to each of the commands to see their help.
""")

    subparsers = parser.add_subparsers()

    pactions = subparsers.add_parser(
        "show-actions",
        help="show the functions and filters available to the templates")
    pactions.set_defaults(func=show_actions)

    pjson = subparsers.add_parser(
        "show-json",
        help="show the variable hierarchy available to templates (JSON format)")
    _parser_add_contents_flags(pjson)
    pjson.set_defaults(func=show_json)

    ptext = subparsers.add_parser(
        "show-text",
        help="show the variable hierarchy available to templates (text format)")
    _parser_add_contents_flags(ptext)
    ptext.set_defaults(func=show_text)

    pgen = subparsers.add_parser(
        "generate",
        help="generate contents from a given template",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Generation process
------------------

The program will select the template provided in the commandline and will print
its contents after replacing them with the statistics gathered from the input
files. Generation uses jinja template files; see README for more information.

Template selection
------------------

The 'template' argument can either be a path to a template file, or the name of
a file in any of the directories in the template search path. The
"gem5_mcpat/templates" directory is always the last entry in the template
search path. If the 'template' argument is provided as a path to a file, its
base directory is also added to the template search path.

Using multiple search paths is useful to modularize your templates into
multiple interchangeable parts (using the "include" directive in
jinja). Includes will take into account the order of the template search path,
so that you can easily override the provided parts (see
"gem5_mcpat/templates/parts").

Gathering statistics
--------------------

This program will take the contents of the 'gem5_config' and 'gem5_stats' files
and merge them together into the "context" for template rendering in jinja. A
context is the jinja name to the set of values available to temapltes. You can
see their contents with the 'show-text' and 'show-json' commands.

Additionally, you can extend and/or override the context with the
'--set-variable' and '--add-json' arguments.

Notes
-----

* This program provides additional functions and filters for the templates (see
  the 'show-actions' command).

* Templates do not completely work out-of-the-box. For example, if your
  simulation uses checkpointing, the default GEM5 scripts will contain both
  "system.cpu" (of type "AtomicSimpleCPU") and "system.switch_cpus" (of type
  "DerivO3CPU", for example).

  For this reason, you must provide a value for the "cores_name" variable used
  in the provided templates. For the checkpointing example above, you can use:

        --set-variable cores_name=system.switch_cpus
""")
    _parser_add_contents_flags(pgen)
    pgen.add_argument(
        "--template-dir",
        action="append",
        default=[],
        type=_arg_directory,
        help="additional directory for the template search path")
    pgen.add_argument(
        "template",
        help="path to or name of template file for McPAT")
    pgen.set_defaults(func=generate)
    pgen.set_defaults(parser=parser)

    args = parser.parse_args(args)
    func = args.func
    args = vars(args)
    del args["func"]
    return func(**args)


if __name__ == '__main__':
    res = main(sys.argv[1:])
    if res is not None:
        sys.exit(res)
